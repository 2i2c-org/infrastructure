basehub:
  nfs:
    enabled: true
    # volumeReporter will report 100% for all hubs as EFS is unbounded, we disable
    # it to save a limited amount of pods we can allocate per core node
    volumeReporter:
      enabled: false
    pv:
      enabled: true
      # from https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-nfs-mount-settings.html
      mountOptions:
      - rsize=1048576
      - wsize=1048576
      - timeo=600
      - soft   # We pick soft over hard, so NFS lockups don't lead to hung processes
      - retrans=2
      - noresvport
      baseShareName: /

  dask-gateway:
    enabled: true

  jupyterhub-home-nfs:
    enabled: true
    eks:
      enabled: true
    prometheusExporter:
      enabled: true

  jupyterhub-groups-exporter:
    enabled: true
    config:
      groupsExporter:
        update_exporter_interval: 3600

  jupyterhub:
    scheduling:
      userScheduler:
        enabled: true
    custom:
      daskhubSetup:
        enabled: true
    singleuser:
      cloudMetadata:
        blockWithIptables: false
    hub:
      config:
        JupyterHub:
          authenticator_class: github
        GitHubOAuthenticator:
          populate_teams_in_auth_state: true
          allowed_organizations:
          - 2i2c-org:hub-access-for-2i2c-staff
          scope:
          - read:org
        Authenticator:
          enable_auth_state: true
          manage_groups: true
      services:
        jupyterhub-groups-exporter: {}
      loadRoles:
        jupyterhub-groups-exporter:
          services:
          - jupyterhub-groups-exporter
          scopes:
          - users
          - groups
      extraConfig:
        custom-github-oauthenticator: |
          class CustomGitHubOAuthenticator(GitHubOAuthenticator):
            async def authenticate(self, *args, **kwargs):
                resp = await super().authenticate(*args, **kwargs)
                if resp["auth_state"]["teams"] is None:
                  return resp
                groups = []
                for team in resp["auth_state"]["teams"]:
                  if f'{team["organization"]["login"]}:{team["slug"]}' not in self.allowed_organizations:
                    continue
                  else:
                    groups.append(f'{team["organization"]["login"]}:{team["slug"]}')
                resp["groups"] = groups
                return resp
          c.JupyterHub.authenticator_class = CustomGitHubOAuthenticator
