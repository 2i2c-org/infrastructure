name: Deploy and test hubs

on:
  push:
    branches:
      - master
    paths:
      - deployer/**
      - requirements.txt
      - .github/workflows/deploy-hubs.yaml
      - .github/actions/setup-deploy/**
      - "**.yaml"
  pull_request:
    branches:
      - master
    paths:
      - deployer/**
      - requirements.txt
      - .github/workflows/deploy-hubs.yaml
      - .github/actions/setup-deploy/**
      - "**.yaml"

# When multiple PRs triggering this workflow are merged, queue them instead
# of running them in parallel
# https://github.blog/changelog/2021-04-19-github-actions-limit-workflow-run-or-job-concurrency/
concurrency: deploy

jobs:
  # This job runs in Pull Requests and on pushes to the default branch. It identifies
  # which files have been aded or modified by recent GitHub activity and parsed a list
  # to the generate-helm-upgrade-jobs function of the deployer. This function generates
  # two lists of dictionaries, which can be read by GitHub Actions as matrix jobs. The
  # first set of jobs describes which clusters need their support chart and/or staging
  # hub upgraded; and the second set of jobs describe which production hubs require
  # upgrading. These two lists are set as job outputs using ::set-output to be consumed
  # by the later jobs. They are also pretty-printed in a human-readable format to the
  # logs.
  generate-jobs:
    runs-on: ubuntu-latest
    outputs:
      support-and-staging-matrix-jobs: ${{ steps.generate-jobs.outputs.support-and-staging-matrix-jobs }}
      prob-hub-matrix-jobs: ${{ steps.generate-jobs.outputs.prod-hub-matrix-jobs }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # Fetch-depth is required for the jitterbit/get-changed-files action
          # https://github.com/jitterbit/get-changed-files/issues/24#issuecomment-1047442168
          fetch-depth: 0

      - name: Install Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install deployer script dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Identify files that have been added or modified
        uses: jitterbit/get-changed-files@v1
        id: changed-files
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Post the pretty print output of this step as a comment on the Pull Request.
      # Do this in a Netlify-style way where if a comment already exists, it is updated
      # instead of generating a new comment.
      - name: Generate matrix jobs
        id: generate-jobs
        run: |
          python deployer generate-helm-upgrade-jobs "${{ steps.changed-files.outputs.added_modified }}"

  # This job upgrades the support chart, staging hub, and dask-staging hub (if present)
  # for clusters in parallel, if those upgrades are required. This job needs the
  # `generate-jobs` job to have completed and set an output to the
  # `support-and-staging-matrix-jobs` variable name. It's inputs are a list of
  # dictionaries with the keys cluster_name, provider, upgrade_support, and
  # upgrade_staging for each cluster that requires it.
  upgrade-support-and-staging:
    runs-on: ubuntu-latest
    needs: generate-jobs
    # Only run this job on pushes to the default branch and when the job output is not
    # an empty list
    if: |
      (github.event_name == 'push' && contains(github.ref, 'master')) &&
      fromJson(needs.generate-jobs.outputs.support-and-staging-matrix-jobs) != '[]'
    strategy:
      # Don't stop other deployments if one fails
      fail-fast: false
      matrix:
        jobs: ${{ fromJson(needs.generate-jobs.outputs.support-and-staging-matrix-jobs) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup deploy for ${{ matrix.jobs.cluster_name }}
        uses: ./.github/actions/setup-deploy
        with:
          provider: ${{ matrix.jobs.provider }}
          GCP_KMS_DECRYPTOR_KEY: ${{ secrets.GCP_KMS_DECRYPTOR_KEY }}

      - name: Upgrade support chart on cluster ${{ matrix.jobs.cluster_name }}
        if: matrix.jobs.upgrade_support == 'true'
        run: |
          python deployer deploy-support ${{ matrix.jobs.cluster_name }}

      - name: Upgrade staging hub on cluster ${{ matrix.jobs.cluster_name }}
        if: matrix.jobs.upgrade_staging == 'true'
        run: |
          python deployer deploy ${{ matrix.jobs.cluster_name }} staging

      - name: Upgrade dask-staging hub on cluster ${{ matrix.jobs.cluster_name }} if it exists
        if: matrix.jobs.upgrade_staging == 'true' && matrix.jobs.cluster_name == '2i2c'
        run: |
          python deployer deploy ${{ matrix.jobs.cluster_name }} dask-staging

  # TODO: Add in "job 3a" where the matrix for prod jobs is edited to exclude any clusters
  # that failed the preceding upgrade-support-and-staging job. See discussion in:
  # https://github.com/2i2c-org/infrastructure/issues/1131

  # This job upgrades production hubs on clusters in parallel, if required. This job
  # needs both the `generate-jobs` and `upgrade-support-and-staging` jobs to have
  # completed and set an output to the `prob-hub-matrix-jobs` variable name. It's inputs
  # are a list of dictionaries with the keys cluster_name, provider, and hub+name for
  # each production hub that requires an upgrade.
  upgrade-prod-hubs:
    runs-on: ubuntu-latest
    needs: [generate-jobs, upgrade-support-and-staging]
    # Only run this job on pushes to the default branch and when the `generate-jobs` job output is not
    # an empty list
    if: |
      (github.event_name == 'push' && contains(github.ref, 'master')) &&
      fromJson(needs.generate-jobs.outputs.prob-hub-matrix-jobs) != '[]'
    strategy:
      # Don't stop other deployments if one fails
      fail-fast: false
      matrix:
        jobs: ${{ fromJson(needs.generate-jobs.outputs.prob-hub-matrix-jobs) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup deploy for ${{ matrix.jobs.cluster_name }}
        uses: ./.github/actions/setup-deploy
        with:
          provider: ${{ matrix.jobs.provider }}
          GCP_KMS_DECRYPTOR_KEY: ${{ secrets.GCP_KMS_DECRYPTOR_KEY }}

      - name: Upgrade and test ${{ matrix.jobs.hub_name }} on cluster ${{ matrix.jobs.cluster_name }}
        run: |
          python deployer deploy ${{ matrix.jobs.cluster_name }} ${{ matrix.jobs.hub_name }}
