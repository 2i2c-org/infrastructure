jupyterhub:
  ingress:
    hosts: [neurohackademy.2i2c.cloud]
    tls:
      - hosts: [neurohackademy.2i2c.cloud]
        secretName: https-auto-tls
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "github"
    jupyterhubConfigurator:
      enabled: false
    homepage:
      templateVars:
        org:
          name: NeuroHackademy
          url: https://neurohackademy.org/
          logo_url: https://user-images.githubusercontent.com/118582/178122521-aa5b83e7-f898-415a-89ff-dc288f599b4f.png
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: 2i2c
          url: https://2i2c.org
        funded_by:
          name: The National Institutes of Health grant 2R25MH112480-06
          url: https://reporter.nih.gov/search/ydTvTwXxk0yd6eGdRznbLQ/project-details/10409452
  singleuser:
    extraFiles:
      gitconfig:
        mountPath: /srv/conda/envs/notebook/etc/gitconfig
        stringData: |
          [credential "https://github.com"]
          helper = !git-credential-github-app --app-key-file /etc/github/github-app-private-key.pem --app-id 356717
          useHttpPath = true
    # User image: https://quay.io/repository/arokem/nh2023?tab=tags
    image:
      name: quay.io/arokem/nh2023
      tag: "894883dfb3bd"
    extraTolerations:
      - key: "2i2c.org/community"
        operator: "Equal"
        value: "neurohackademy"
        effect: "NoSchedule"
    profileList:
      - display_name: "Regular CPU instance"
        slug: small
        default: true
        kubespawner_override:
          cpu_guarantee: 0.5
          cpu_limit: 14
          mem_guarantee: 4G
          mem_limit: 16G
          node_selector:
            node.kubernetes.io/instance-type: r5.xlarge
            2i2c.org/community: neurohackademy
        profile_options:
          interface:
            display_name: Interface
            choices:
              tree:
                display_name: Classic Notebook
                slug: "tree"
                kubespawner_override:
                  default_url: "/tree"
              lab:
                display_name: JupyterLab
                slug: "lab"
                kubespawner_override:
                  default_url: "/lab"
              pull:
                display_name: Pull curriculum repo and redirect to /lab
                slug: "pull"
                kubespawner_override:
                  default_url: "/git-pull?repo=https%3A%2F%2Fgithub.com%2FNeuroHackademy-2023%2Fcurriculum&urlpath=lab&branch=main"
      - display_name: GPU machine
        slug: gpu
        description: "Start a container on a dedicated node with a GPU"
        kubespawner_override:
          mem_limit: null
          mem_guarantee: 14G
          environment:
            NVIDIA_DRIVER_CAPABILITIES: compute,utility
          node_selector:
            node.kubernetes.io/instance-type: g4dn.xlarge
            2i2c.org/community: neurohackademy
          extra_resource_limits:
            nvidia.com/gpu: "1"
  hub:
    config:
      JupyterHub:
        authenticator_class: cilogon
      CILogonOAuthenticator:
        oauth_callback_url: https://neurohackademy.2i2c.cloud/hub/oauth_callback
        allowed_idps:
          http://github.com/login/oauth/authorize:
            default: true
            username_derivation:
              username_claim: "preferred_username"
      OAuthenticator:
        # WARNING: Don't use allow_existing_users with config to allow an
        #          externally managed group of users, such as
        #          GitHubOAuthenticator.allowed_organizations, as it breaks a
        #          common expectations for an admin user.
        #
        #          The broken expectation is that removing a user from the
        #          externally managed group implies that the user won't have
        #          access any more. In practice the user will still have
        #          access if it had logged in once before, as it then exists
        #          in JupyterHub's database of users.
        #
        allow_existing_users: True
      Authenticator:
        # WARNING: Removing a user from admin_users or allowed_users doesn't
        #          revoke admin status or access.
        #
        #          OAuthenticator.allow_existing_users allows any user in the
        #          JupyterHub database of users able to login. This includes
        #          any previously logged in user or user previously listed in
        #          allowed_users or admin_users, as such users are added to
        #          JupyterHub's database on startup.
        #
        #          To revoke admin status or access for a user when
        #          allow_existing_users is enabled, first remove the user from
        #          admin_users or allowed_users, then deploy the change, and
        #          finally revoke the admin status or delete the user via the
        #          /hub/admin panel.
        #
        admin_users:
          - arokem
