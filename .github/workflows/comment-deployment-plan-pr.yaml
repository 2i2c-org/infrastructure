name: Comment Hub Deployment Plan to a Pull Request

on:
  workflow_run:
    workflows:
      - "Deploy and test hubs"
    types:
      - "completed"

jobs:
  # This job downloads artifacts generated by the "Deploy and test hubs" workflow.
  # The artifacts generated are two files: one containing the Pull Request number of the
  # run, and a second containing Markdown tables detailing which hubs will be upgraded as
  # a result of merging a Pull Request. This Markdown content will be posted to the
  # Pull Request as a comment. This means that no-one has to go searching through
  # GitHub Actions logs to see if the hubs they intended to be upgraded, will be
  # upgraded. The job posts the comment in a 'Netlify style', i.e., if a comment has
  # already been posted (identified as having the 'github-actions[bot]' author and
  # '<!-- deployment-plan -->' string in the body), the existing comment will be
  # updated rather than posting a new one.
  post-deployment-plan:
    runs-on: ubuntu-latest
    # Only run this job if the workflow that triggered it was from a Pull Request and
    # completed successfully
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    # Give GITHUB_TOKEN enough permissions to read actions artifacts, issue comments and
    # post/update comments on Pull Requests
    permissions:
      actions: read
      issues: read
      pull-requests: write
    steps:
      - name: Install ghapi and requests to interact with the GitHub API via Python
        run: |
          pip install ghapi requests

      - name: Retrieve artifacts and post deployment plan as a comment on a Pull Request
        shell: python
        run: |
          import io
          import os
          import sys
          import zipfile
          from textwrap import dedent

          import requests
          from ghapi.all import GhApi, paged

          # Setup variables
          owner, repo = r"""${{ github.repository }}""".split("/")
          run_id = r"""${{ github.event.workflow_run.id }}"""

          print(dedent(f"""Repo owner: {owner}
          Repo name: {repo}
          Workflow run ID: {run_id}
          """))

          # Authenticate with GitHub API
          api = GhApi(token=r"""${{ secrets.GITHUB_TOKEN }}""")

          # List all artifacts for the workflow run
          all_artifacts = paged(
              api.actions.list_workflow_run_artifacts,
              owner=owner,
              repo=repo,
              run_id=run_id,
              per_page=100,
          )
          print(f"Does all_artifacts have something in it?: {bool(all_artifacts)}")

          # Filter for the artifact with the name we want: 'pr'
          for page in all_artifacts:
              artifact_id = next(
                  (
                      artifact["id"]
                      for artifact in page["artifacts"]
                      if artifact["name"] == "pr"
                  ),
                  None,
              )

              if artifact_id is not None:
                  break

          if artifact_id is None:
              print(f"No artifact found called 'pr' for workflow run: {run_id}")
              sys.exit()

          # Download the artifact
          url = f"https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/zip"
          headers = {
              "Accept": "application/vnd.github+json",
              "Authorization": r"""token ${{ secrets.GITHUB_TOKEN }}"""
          }
          resp = requests.get(url, headers=headers, stream=True)

          # Extract the zip archive
          with zipfile.ZipFile(io.BytesIO(resp.content)) as zip_ref:
              zip_ref.extractall(os.getcwd())

          # Read in Pull Request number
          with open("pr-number.txt") as f:
              pr_number = f.read().strip("\n")

          # Read in comment body
          with open("comment-body.txt") as f:
              comment_body = f.read().strip("\n")

          print(dedent(f"""PR number: {pr_number}
          Comment body:
              {comment_body}
          """))

          # List all comments on the PR
          issue_comments = paged(
              api.issues.list_comments,
              owner=owner,
              repo=repo,
              issue_number=pr_number,
              per_page=100,
          )

          # Find if a deployment-plan comment has been previously posted
          comment = next(
              (
                  comment[0]
                  for comment in issue_comments
                  if comment[0].user.login == "github-actions[bot]"
                  and "<!-- deployment-plan -->" in comment[0].body
              ),
              False,
          )

          if comment:
              # Comment exists - update it
              api.issues.update_comment(
                  owner=owner,
                  repo=repo,
                  comment_id=comment.id,
                  body=comment_body,
              )
          else:
              # Comment doesn't exist - create a new one
              api.issues.create_comment(
                  owner=owner,
                  repo=repo,
                  issue_number=pr_number,
                  body=comment_body,
              )
