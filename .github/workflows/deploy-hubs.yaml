name: Deploy and test hubs

on:
  push:
    branches:
      - master
    paths:
      - deployer/**
      - requirements.txt
      - .github/workflows/deploy-hubs.yaml
      - .github/actions/setup-deploy/**
      - "**.yaml"
    tags:
      - "**"
  pull_request:
    branches:
      - master
    paths:
      - deployer/**
      - requirements.txt
      - .github/workflows/deploy-hubs.yaml
      - .github/actions/setup-deploy/**
      - "**.yaml"
  workflow_dispatch:

# When multiple PRs triggering this workflow are merged, queue them instead
# of running them in parallel
# https://github.blog/changelog/2021-04-19-github-actions-limit-workflow-run-or-job-concurrency/
concurrency: deploy

# This is the maximum number of matrix jobs to run in parallel. By default, GitHub
# maximises this number based on the available runners on GitHub-hosted virtual machines
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymax-parallel
# The number 20 was chosen arbitrarily and we should change this to optimise our workflow
# as needed.
env:
  max-parallel: 20

jobs:
  generate-jobs:
    runs-on: ubuntu-latest
    outputs:
      support-and-staging-matrix-jobs: ${{ steps.generated-jobs.outputs.support-and-staging-matrix-jobs }}
      prob-hub-matrix-jobs: ${{ steps.generated-jobs.outputs.prod-hub-matrix-jobs }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Identify files that have been added or modified
        uses: jitterbit/get-changed-files@v1
        id: changed-files
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate matrix jobs
        if: github.event_name != 'pull_request'
        run: |
          python deployer generate-helm-upgrade-jobs "${{ steps.changed-files.outputs.added_modified }}"

      - name: Pretty print matrix jobs
        if: github.event_name != 'pull_request'
        run: |
          python deployer generate-helm-upgrade-jobs --pretty-print "${{ steps.changed-files.outputs.added_modified }}"

  upgrade-support-and-staging-jobs:
    runs-on: ubuntu-latest
    needs: generate-jobs
    strategy:
      # Don't stop other deployments if one fails
      fail-fast: false
      # Maximum number of jobs to run in parallel
      max-parallel: ${{ env.max-parallel }}
      matrix:
        jobs: ${{ fromJson(needs.generate-jobs.outputs.support-and-staging-matrix-jobs) }}

    steps:
      - name: Setup deploy for ${{ matrix.jobs.cluster_name }}
        uses: ./.github/actions/setup-deploy
        with:
          provider: ${{ matrix.provider }}
          cluster: ${{ matrix.cluster_name }}

      - name: Upgrade support chart on cluster ${{ matrix.jobs.cluster_name }}
        if: matrix.jobs.upgrade_support == 'true'
        run: |
          python deployer deploy-support ${{ matrix.jobs.cluster_name }}

      - name: Upgrade staging hub on cluster ${{ matrix.jobs.cluster_name }}
        if: matrix.jobs.upgrade_staging == 'true'
        run: |
          python deployer deploy ${{ matrix.jobs.cluster_name }} staging

      - name: Upgrade dask-staging hub on cluster ${{ matrix.jobs.cluster_name }}
        if: matrix.jobs.upgrade_staging == 'true' && matrix.jobs.cluster_name == '2i2c'
        run: |
          python deployer deploy ${{ matrix.jobs.cluster_name }} dask-staging
