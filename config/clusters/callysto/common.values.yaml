nfs:
  enabled: true
  pv:
    mountOptions:
      - soft # We pick soft over hard, so NFS lockups don't lead to hung processes
      - noatime
    # Google FileStore IP
    serverIP: 10.93.235.178
    # Name of Google Filestore share
    baseShareName: /homes/
jupyterhub:
  # pre-puller is necessary as the image is pretty big, and
  # pulling during first user spawn might cause timeouts and poor user
  # experience. Also helps with node pre-warming.
  prePuller:
    continuous:
      enabled: true
    hook:
      enabled: true
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: false
      # add_staff_user_ids_of_type: "google"
    homepage:
      templateVars:
        org:
          name: Callysto
          url: https://www.callysto.ca
          logo_url: https://www.callysto.ca/wp-content/uploads/2022/08/Callysto-HUB_vertical.png
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: 2i2c
          url: https://2i2c.org
        funded_by:
          name: Callysto
          url: https://www.callysto.ca
  singleuser:
    image:
      name: callysto/2i2c
      tag: 0.1.4
    extraFiles:
      tree.html:
        mountPath: /usr/local/share/jupyter/custom_template/tree.html
        stringData: |
          {% extends "templates/tree.html" %}
          {% block header %}
          <style>
          .clusters_tab_link {
            visibility: hidden;
          }
          </style>
          {% endblock %}
          {% block logo %}
            <img src="https://www.callysto.ca/wp-content/uploads/2022/08/Callysto-HUB_horizontal.png" alt="CallystoHub"/>
          {% endblock %}
      notebook.html:
        mountPath: /usr/local/share/jupyter/custom_template/notebook.html
        stringData: |
          {% extends "templates/notebook.html" %}
          {% block logo %}
            <img src="https://www.callysto.ca/wp-content/uploads/2022/08/Callysto-HUB_horizontal.png" alt="CallystoHub"/>
          {% endblock %}
  hub:
    extraConfig:
      001-cilogon-email-auth: |
        from fnmatch import fnmatch

        from oauthenticator.cilogon import CILogonOAuthenticator


        class EmailAuthenticatingCILogonOAuthenticator(CILogonOAuthenticator):
            """
            Custom override of CILogonOAuthenticator to allow access control via
            one property (email) while the username itself is a different
            property (oidc), and to allow `allowed_domains` to involve wildcards
            like *.

            This allows us to restrict access based on the *email* of the
            authenticated user without having to store the actual email in our
            servers or use it as a username.
            """

            async def check_allowed(self, username, auth_model):
                """
                Replaces the default implementation of check_allowed as it
                otherwise would error, not finding a `@` symbol in the non-email
                username.

                Mostly a copy of OAuthenticator 16.1, for comparison see:
                https://github.com/jupyterhub/oauthenticator/blob/16.1.0/oauthenticator/cilogon.py#L349-L373
                """
                if await super(CILogonOAuthenticator, self).check_allowed(username, auth_model):
                    return True

                user_info = auth_model["auth_state"][self.user_auth_state_key]
                user_idp = user_info["idp"]

                idp_allow_all = self.allowed_idps[user_idp].get("allow_all")
                if idp_allow_all:
                    return True

                user_info = auth_model["auth_state"][self.user_auth_state_key]
                user_idp = user_info["idp"]

                idp_allowed_domains = self.allowed_idps[user_idp].get("allowed_domains")
                if idp_allowed_domains:
                    # this was the part we wanted to replace
                    email = auth_model["auth_state"]["cilogon_user"]["email"]
                    email_domain = email.split("@", 1)[1].lower()
                    for ad in idp_allowed_domains:
                        # fnmatch allow us to use wildcards like * and ?, but
                        # not the full regex. For simple domain matching this is
                        # good enough. If we were to use regexes instead, people
                        # will have to escape all their '.'s, and since that is
                        # actually going to match 'any character' it is a
                        # possible security hole. For details see
                        # https://docs.python.org/3/library/fnmatch.html.
                        if fnmatch(email_domain, ad):
                            return True

                # users should be explicitly allowed via config, otherwise they aren't
                return False


        c.JupyterHub.authenticator_class = EmailAuthenticatingCILogonOAuthenticator

    config:
      CILogonOAuthenticator:
        # Usernames are based on a unique "oidc" claim and not email, so we need
        # to reference these names when declaring admin_users. The custom
        # authenticator class used will reject any user not having an associated
        # email with a specific domain name though.
        admin_users:
          - "117859169473992122769" # Georgiana (2i2c)
          - "115722756968212778437" # Sarah (2i2c)
          - "103849660365364958119" # Erik (2i2c)
          - "115240156849150087300" # Ian Allison (PIMS)
          - "102749090965437723445" # Byron Chu (Cybera)
          - "115909958579864751636" # Michael Jones (Cybera)
          - "106951135662332329542" # Elmar Bouwer (Cybera)
        allowed_idps:
          http://google.com/accounts/o8/id:
            username_derivation:
              username_claim: "oidc"
            allowed_domains: &allowed_domains
              - 2i2c.org
              - btps.ca
              - callysto.ca
              - cssd.ab.ca
              - cybera.ca
              - eics.ab.ca
              - eips.ca
              - epsb.ca
              - fmpsd.ab.ca
              - fmcsd.ab.ca
              - rvschools.ab.ca
              - spschools.org
              - wsrd.ca
              - ucalgary.ca
              - ualberta.ca
              - cfis.com
              - "*.ca"
          http://login.microsoftonline.com/common/oauth2/v2.0/authorize:
            username_derivation:
              username_claim: "oidc"
            allowed_domains: *allowed_domains
