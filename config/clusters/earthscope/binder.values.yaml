basehub:
  nfs:
    enabled: false
    pv:
      enabled: false
  jupyterhub:
    ingress:
      hosts: [hub.binder.earthscope.2i2c.cloud]
      tls:
        - hosts: [hub.binder.earthscope.2i2c.cloud]
          secretName: https-auto-tls
    cull:
      every: 300
      # No pods over 12h long
      maxAge: 43200
      # Also cull all users more than 12h old
      users: true
    custom:
      daskhubSetup:
        enabled: false
      binderhubUI:
        enabled: true
      2i2c:
        add_staff_user_ids_to_admin_users: false
      jupyterhubConfigurator:
        enabled: false
      singleuserAdmin:
        extraVolumeMounts: []
      homepage:
        templateVars:
          enabled: false
    singleuser:
      nodeSelector:
        2i2c/hub-name: binder
      memory:
        guarantee: 1G
        limit: 2G
      cpu:
        limit: 1
      storage:
        type: none
        extraVolumeMounts: []
      initContainers: []
      profileList: []
      cmd:
        - python3
        - "-c"
        - |
          import os
          import sys

          try:
              import jupyterlab
              import jupyterlab.labapp
              major = int(jupyterlab.__version__.split(".", 1)[0])
          except Exception as e:
              print("Failed to import jupyterlab: {e}", file=sys.stderr)
              have_lab = False
          else:
              have_lab = major >= 3

          if have_lab:
              # technically, we could accept another jupyter-server-based frontend
              print("Launching jupyter-lab", file=sys.stderr)
              exe = "jupyter-lab"
          else:
              print("jupyter-lab not found, launching jupyter-notebook", file=sys.stderr)
              exe = "jupyter-notebook"

          # launch the notebook server
          os.execvp(exe, sys.argv)
    hub:
      config:
        BinderSpawnerMixin:
          auth_enabled: false
      redirectToServer: false
      loadRoles:
        binder:
          services:
            - binder
          scopes:
            - servers
            - admin:users
        user:
          scopes:
            - self
            - access:services!service=binder
  jupyterhub-home-nfs:
    enabled: false
    eks:
      enabled: false
  binderhub-service:
    enabled: true
    networkPolicy:
      enabled: true
    dockerApi:
      nodeSelector:
        2i2c/hub-name: binder
    ingress:
      enabled: true
      hosts: [binder.earthscope.2i2c.cloud]
      tls:
        - hosts: [binder.earthscope.2i2c.cloud]
          secretName: binder-https-auto-tls
    custom:
      sendLogsOfLaunchEventsTo2i2c: true
    config:
      KubernetesBuildExecutor:
        node_selector:
          2i2c/hub-name: binder
          node.kubernetes.io/instance-type: r5.xlarge
      BinderHub:
        base_url: /
        hub_url: https://hub.binder.earthscope.2i2c.cloud
        badge_base_url: https://binder.earthscope.2i2c.cloud
        auth_enabled: false
        enable_api_only_mode: false
        image_prefix: quay.io/imagebuilding-non-gcp-hubs/earthscope-binder-
      DockerRegistry:
        url: &url https://quay.io
        username: &username imagebuilding-non-gcp-hubs+image_builder
    extraEnv:
      - name: JUPYTERHUB_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: hub
            key: hub.services.binder.apiToken
      - name: JUPYTERHUB_CLIENT_ID
        value: "service-binder"
      - name: JUPYTERHUB_API_URL
        value: "https://hub.binder.earthscope.2i2c.cloud/hub/api"
      # Without this, the redirect URL to /hub/api/... gets
      # appended to binderhub's URL instead of the hub's
      - name: JUPYTERHUB_BASE_URL
        value: "https://hub.binder.earthscope.2i2c.cloud/"
    buildPodsRegistryCredentials:
      server: *url
      username: *username
