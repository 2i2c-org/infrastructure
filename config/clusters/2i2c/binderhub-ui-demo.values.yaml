jupyterhub:
  ingress:
    hosts:
      - hub.binderhub-ui-demo.2i2c.cloud
    tls:
      - secretName: https-auto-tls
        hosts:
          - hub.binderhub-ui-demo.2i2c.cloud
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "github"
    jupyterhubConfigurator:
      enabled: false
    binderhubUI:
      enabled: true
    homepage:
      templateVars:
        org:
          name: Demo binderhub UI with binderhub-service
          url: https://2i2c.org
          logo_url: https://2i2c.org/media/logo.png
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: 2i2c
          url: https://2i2c.org
        funded_by:
          name: ""
          url: ""
  singleuser:
    # This is copied from https://github.com/jupyterhub/binderhub/blob/c6c5dc8fe73f81ca538c47b420b33f317c3aa8ae/helm-chart/binderhub/values.yaml
    # We should update this as soon as the upstream updates
    # FIXME: investigate incorporating this configuration
    #        in the configuration defaults coming from basehub
    #        potentially taking into account the value of custom.binderhubUI.enabled
    #        to avoid specifying it over and over again for each new hub using the
    #        binderhub UI
    cmd:
      # start jupyterlab server *if available*
      # fallback on jupyter-notebook
      - python3
      - "-c"
      - |
        import os
        import sys

        try:
            import jupyterlab
            import jupyterlab.labapp
            major = int(jupyterlab.__version__.split(".", 1)[0])
        except Exception as e:
            print("Failed to import jupyterlab: {e}", file=sys.stderr)
            have_lab = False
        else:
            have_lab = major >= 3

        if have_lab:
            # technically, we could accept another jupyter-server-based frontend
            print("Launching jupyter-lab", file=sys.stderr)
            exe = "jupyter-lab"
        else:
            print("jupyter-lab not found, launching jupyter-notebook", file=sys.stderr)
            exe = "jupyter-notebook"

        # launch the notebook server
        os.execvp(exe, sys.argv)
    storage:
      type: none
  hub:
    services:
      binder:
        # FIXME: ref https://github.com/2i2c-org/binderhub-service/issues/57
        # for something more readable and requiring less copy-pasting
        url: http://binderhub-ui-demo-binderhub-service:8090
        display: true
        oauth_no_confirm: true
    config:
      BinderSpawnerMixin:
        auth_enabled: true
      JupyterHub:
        authenticator_class: github
      GitHubOAuthenticator:
        oauth_callback_url: https://hub.binderhub-ui-demo.2i2c.cloud/hub/oauth_callback

binderhub-service:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 256m
      cert-manager.io/cluster-issuer: letsencrypt-prodc
    hosts:
      - binderhub-ui-demo.2i2c.cloud
    tls:
      - secretName: https-auto-tls
        hosts:
          - binderhub-ui-demo.2i2c.cloud
  extraEnv:
    - name: JUPYTERHUB_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: '{{ include "jupyterhub.hub.fullname" . }}'
          key: hub.services.binder.apiToken
    - name: JUPYTERHUB_CLIENT_ID
      value: "service-binder"
    - name: JUPYTERHUB_OAUTH_CALLBACK_URL
      value: "/services/binder/oauth_callback"
    - name: JUPYTERHUB_API_URL
      value: "https://hub.binderhub-ui-demo.2i2c.cloud/hub/api/"

  config:
    BinderHub:
      hub_url: https://hub.binderhub-ui-demo.2i2c.cloud
      badge_base_url: https://binderhub-ui-demo.2i2c.cloud
      auth_enabled: true
      enable_api_only_mode: false
      image_prefix: us-central1-docker.pkg.dev/two-eye-two-see/binderhub-ui-demo-registry/binderhub-service-
  # The password to the registry is stored encrypted in the hub's encrypted config file
  buildPodsRegistryCredentials:
    server: "https://us-central1-docker.pkg.dev"
    username: "_json_key"
