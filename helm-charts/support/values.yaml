prometheusIngressAuthSecret:
  enabled: false
  username: ""
  password: ""

cluster-autoscaler:
  enabled: false
ingress-nginx:
  controller:
    podLabels:
      hub.jupyter.org/network-access-proxy-http: "true"
prometheus:
  networkPolicy:
    enabled: true
  alertmanager:
    enabled: false
  nodeExporter:
    tolerations:
      - effect: NoSchedule
        # Deploy onto user nodes
        key: hub.jupyter.org_dedicated
        value: user
      - effect: NoSchedule
        # Deploy onto user nodes
        key: k8s.dask.org_dedicated
        value: worker
    updateStrategy:
      type: RollingUpdate
  pushgateway:
    enabled: false
  server:
    ingress:
      annotations:
        # Annotations required to enable basic authentication for any ingress
        # into prometheus server from the outside world. This secret is
        # created via templates/prometheus-ingress-auth/secret.yaml file in the support chart,
        # and the contents are controlled by config under prometheusIngressAuthSecret.
        # Ingress is not enabled by default, so whichever clusters we want
        # this we should enable it explicitly.
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: prometheus-ingress-auth-basic
        nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
        # If we enable external ingress into prometheus, we must secure it with HTTPS
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
    strategy:
      # We have a persistent disk attached, so the default (RollingUpdate)
      # can sometimes get 'stuck' and require pods to be manually deleted.
      type: Recreate
    resources:
      # Without this, prometheus can easily starve users
      requests:
        cpu: 0.2
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi
    labels:
      # For HTTP access to the hub, to scrape metrics
      hub.jupyter.org/network-access-hub: "true"
    persistentVolume:
      size: 100Gi
    retention: 90d
    service:
      type: ClusterIP
  # make sure we collect metrics on pods by app/component at least
  kube-state-metrics:
    metricLabelsAllowlist:
      - pods=[app,component,hub.jupyter.org/username,app.kubernetes.io/component]
      - nodes=[*]

grafana:
  persistence:
    enabled: true
  deploymentStrategy:
    type: Recreate
  service:
    type: ClusterIP

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          orgId: 1
          type: prometheus
          url: http://support-prometheus-server
          access: proxy
          isDefault: true
          editable: false

# Enable a daemonset to install nvidia device plugin to GPU nodes
nvidiaDevicePlugin:
  # For Azure-specific image, default to false
  azure:
    enabled: false
  # For GKE specific image, defaults to false
  gke:
    enabled: false
  # For eksctl / AWS specific daemonset, defaults to false
  aws:
    enabled: false

# Enables  https://github.com/yuvipanda/cryptnono/ to prevent cryptomining
cryptnono:
  enabled: true

# A placeholder as global values that can be referenced from the same location
# of any chart should be possible to provide, but aren't necessarily provided or
# used.
global: {}
