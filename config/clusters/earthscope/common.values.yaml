basehub:
  nfs:
    enabled: true
    volumeReporter:
      enabled: false
    pv:
      enabled: true
      # from https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-nfs-mount-settings.html
      mountOptions:
        - rsize=1048576
        - wsize=1048576
        - timeo=600
        - soft # We pick soft over hard, so NFS lockups don't lead to hung processes
        - retrans=2
        - noresvport
      serverIP: fs-08e7747330d833d82.efs.us-east-2.amazonaws.com
      baseShareName: /
  dask-gateway:
    enabled: true
  jupyterhub:
    custom:
      daskhubSetup:
        enabled: true
      2i2c:
        add_staff_user_ids_to_admin_users: true
        add_staff_user_ids_of_type: "google"
      jupyterhubConfigurator:
        enabled: false
    hub:
      extraConfig:
        001-username-claim: |
          from oauthenticator.generic import GenericOAuthenticator
          from traitlets import List, Unicode
          from urllib.parse import urlparse

          class CustomGenericOAuthenticator(GenericOAuthenticator):
            # required_scopes functionality comes in from https://github.com/jupyterhub/oauthenticator/pull/719
            # Can be removed from here once that PR is merged
            required_scopes = List(
                Unicode(),
                config=True,
                help="""
                List of scopes that must be granted to allow login.

                All the scopes listed in this config must be present in the OAuth2 grant
                from the authorizing server to allow the user to login. We request all
                the scopes listed in the 'scope' config, but only a subset of these may
                be granted by the authorization server. This may happen if the user does not
                have permissions to access a requested scope, or has chosen to not give consent
                for a particular scope. If the scopes listed in this config are not granted,
                the user will not be allowed to log in.

                See the OAuth documentation of your OAuth provider for various options.
                """,
            )

            async def check_allowed(self, username, auth_model):
              if await super().check_allowed(username, auth_model):
                  return True

              if self.required_scopes:
                  granted_scopes = auth_model.get('auth_state', {}).get('scope', [])
                  missing_scopes = set(self.required_scopes) - set(granted_scopes)
                  if missing_scopes:
                      self.log.info(f"Denying access to user {username} - scopes {missing_scopes} were not granted, only {granted_scopes} were granted")
                      return False
                  else:
                      return True

              return False

            async def authenticate(self, *args, **kwargs):
              resp = await super().authenticate(*args, **kwargs)
              # Setup groups to be same as list of scopes granted
              # This can go away after https://github.com/jupyterhub/oauthenticator/pull/735 is
              # merged
              resp["groups"] = resp["auth_state"]["scope"]
              return resp

          def populate_token(spawner, auth_state):
            # For our deployment-service-check health check user, there is no auth_state.
            # So these env variables need not be set.
            if auth_state:
              url_parts = urlparse(spawner.authenticator.token_url)
              base_url = f"{url_parts.scheme}://{url_parts.netloc}"
              scope_str = " ".join(spawner.authenticator.scope)

              token_env = {
                'ES_OAUTH2__AUDIENCE': spawner.authenticator.extra_authorize_params.get("audience", ""),
                'ES_OAUTH2__CLIENT_ID': spawner.authenticator.client_id,
                'ES_OAUTH2__DOMAIN': base_url,
                'ES_OAUTH2__SCOPE': scope_str,
                'ES_OAUTH2__ACCESS_TOKEN': auth_state.get("access_token", ""),
                'ES_OAUTH2__ID_TOKEN': auth_state.get("id_token", ""),
                'ES_OAUTH2__REFRESH_TOKEN': auth_state.get('refresh_token', '')
              }
              spawner.environment.update(token_env)

          c.Spawner.auth_state_hook = populate_token

          c.JupyterHub.authenticator_class = CustomGenericOAuthenticator
      config:
        CustomGenericOAuthenticator:
          required_scopes:
            # This allows EarthScope to control who can login to the hub
            - geolab
        GenericOAuthenticator:
          scope:
            - openid
            # This gives us refresh token
            - offline_access
            # This allows EarthScope to control who can login to the hub
            # Everyone who logs in with Google and has a `@2i2c.org` email will be
            # automatically granted this scope, so we can test. See
            # https://2i2c.freshdesk.com/a/tickets/1280 for how this was granted.
            - geolab
            - geolab:dev
            - geolab:power
          extra_authorize_params:
            # This isn't an actual URL, just a string. Must not have a trailing slash
            audience: https://api.dev.earthscope.org
          username_claim: sub
          # Convert 'scope' from the OAuth2 response into JupyterHub groups
          manage_groups: true
        CILogonOAuthenticator:
          allowed_idps:
            http://github.com/login/oauth/authorize:
              default: true
              username_derivation:
                username_claim: "preferred_username"
            http://google.com/accounts/o8/id:
              username_derivation:
                username_claim: email
        Authenticator:
          enable_auth_state: true
          admin_users:
            - google-oauth2|117718799995701713253 #Chad Trabant, https://2i2c.freshdesk.com/a/tickets/1279
            - google-oauth2|117710759588624106233 #Sarah Wilson
            - google-oauth2|112630227497477971771 #Robert Weekly
            - google-oauth2|118403506154942842583 #Alex Hamilton
            - google-oauth2|108516754518362587599 # Yuvi
    singleuser:
      cloudMetadata:
        blockWithIptables: false
      profileList:
        - display_name: "Shared Small: 1-4 CPU, 7.2 GB"
          description: "A shared machine, the recommended option until you experience a limitation."
          allowed_groups:
            - geolab
            - geolab:dev
            - geolab:power
          profile_options: &profile_options
            image:
              display_name: Image
              unlisted_choice:
                enabled: True
                display_name: "Custom image"
                validation_regex: "^.+:.+$"
                validation_message: "Must be a publicly available docker image, of form <image-name>:<tag>"
                kubespawner_override:
                  image: "{value}"
              choices:
                geolab-general:
                  display_name: GeoLab
                  slug: geolab-general
                  kubespawner_override:
                    image: public.ecr.aws/earthscope-dev/geolab:td-dev-dd5851e6
                mt-shortcourse:
                  display_name: MT-ShortCourse
                  slug: mt-shortcourse
                  kubespawner_override:
                    image: public.ecr.aws/earthscope-dev/geolab_default:mt_shortcourse-1a6a2fbd
                jupyter-scipy:
                  display_name: Jupyter
                  slug: jupyter-scipy
                  kubespawner_override:
                    # FIXME: use quay.io/ for tags after 2023-10-20
                    image: jupyter/scipy-notebook:2023-06-27
                rocker-geospatial:
                  display_name: RStudio
                  slug: rocker-geospatial
                  kubespawner_override:
                    image: rocker/binder:4.3
                    image_pull_policy: Always
                    # Launch into RStudio after the user logs in
                    default_url: /rstudio
                    # Ensures container working dir is homedir
                    # https://github.com/2i2c-org/infrastructure/issues/2559
                    working_dir: /home/rstudio
          kubespawner_override:
            mem_guarantee: 7.234G
            cpu_guarantee: 0.1
            mem_limit: 7.234G
            node_selector:
              node.kubernetes.io/instance-type: r5.xlarge
        - display_name: "Shared Small: 1-4 CPU, 7-14 GB"
          description: "A shared machine, the recommended option until you experience a limitation."
          allowed_groups:
            - geolab
            - geolab:dev
            - geolab:power
          profile_options: &profile_options
            image:
              display_name: Image
              unlisted_choice:
                enabled: True
                display_name: "Custom image"
                validation_regex: "^.+:.+$"
                validation_message: "Must be a publicly available docker image, of form <image-name>:<tag>"
                kubespawner_override:
                  image: "{value}"
              choices:
                geolab-general:
                  display_name: GeoLab
                  slug: geolab-general
                  kubespawner_override:
                    image: public.ecr.aws/earthscope-dev/geolab:td-dev-dd5851e6
                mt-shortcourse:
                  display_name: MT-ShortCourse
                  slug: mt-shortcourse
                  kubespawner_override:
                    image: public.ecr.aws/earthscope-dev/geolab_default:mt_shortcourse-1a6a2fbd
                jupyter-scipy:
                  display_name: Jupyter
                  slug: jupyter-scipy
                  kubespawner_override:
                    # FIXME: use quay.io/ for tags after 2023-10-20
                    image: jupyter/scipy-notebook:2023-06-27
                rocker-geospatial:
                  display_name: RStudio
                  slug: rocker-geospatial
                  kubespawner_override:
                    image: rocker/binder:4.3
                    image_pull_policy: Always
                    # Launch into RStudio after the user logs in
                    default_url: /rstudio
                    # Ensures container working dir is homedir
                    # https://github.com/2i2c-org/infrastructure/issues/2559
                    working_dir: /home/rstudio
          kubespawner_override:
            mem_guarantee: 7.234G
            cpu_guarantee: 0.1
            mem_limit: 14.468G
            node_selector:
              node.kubernetes.io/instance-type: r5.xlarge
        - display_name: "Small: 4 CPU, 32 GB"
          description: "A dedicated machine for you."
          allowed_groups:
            - geolab
            - geolab:dev
            - geolab:power
          profile_options: *profile_options
          kubespawner_override:
            mem_guarantee: 28.937G
            cpu_guarantee: 0.4
            mem_limit: null
            node_selector:
              node.kubernetes.io/instance-type: r5.xlarge
        - display_name: "Medium: 16 CPU, 128 GB"
          description: "A dedicated machine for you."
          profile_options: *profile_options
          allowed_groups:
            - geolab:dev
            - geolab:power
          kubespawner_override:
            mem_guarantee: 120.513G
            cpu_guarantee: 1.6
            mem_limit: null
            node_selector:
              node.kubernetes.io/instance-type: r5.4xlarge
        - display_name: "Large: 64 CPU, 512 GB"
          description: "A dedicated machine for you"
          profile_options: *profile_options
          allowed_groups:
            - geolab:power
          kubespawner_override:
            mem_guarantee: 489.13G
            cpu_guarantee: 6.4
            mem_limit: null
            node_selector:
              node.kubernetes.io/instance-type: r5.16xlarge

    scheduling:
      userScheduler:
        enabled: true
  jupyterhub-home-nfs:
    enabled: true
    eks:
      enabled: true
