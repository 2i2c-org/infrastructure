name: Comment Hub Deployment Plan to a Pull Request

on:
  workflow_run:
    workflows:
      - "Deploy and test hubs"
    types:
      - "completed"

jobs:
  # This job downloads artifacts generated by the "Deploy and test hubs" workflow.
  # The artifacts generated are two files: one containing the Pull Request number of the
  # run, and a second containing Markdown tables detailing which hubs will be upgraded as
  # a result of merging a Pull Request. This Markdown content will be posted to the
  # Pull Request as a comment. This means that no-one has to go searching through
  # GitHub Actions logs to see if the hubs they intended to be upgraded, will be
  # upgraded. The job posts the comment in a 'Netlify style', i.e., if a comment has
  # already been posted (identified as having the 'github-actions[bot]' author and
  # '<!-- deployment-plan -->' string in the body), the existing comment will be
  # updated rather than posting a new one.
  post-deployment-plan:
    runs-on: ubuntu-latest
    # Only run this job if the workflow that triggered it was from a Pull Request and
    # completed successfully
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    # Give GITHUB_TOKEN enough permissions to read actions artifacts, issue comments and
    # post/update comments on Pull Requests
    permissions:
      actions: read
      issues: read
      pull-requests: write
    steps:
      - name: Download artifacts
        id: download-artifacts
        uses: actions/github-script@v6.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });

            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];

            try {
              var download = await github.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
              });

              var fs = require('fs');
              fs.writeFileSync('${{ github.workspace }}/pr.zip', Buffer.from(download.data));

              console.log("::set-output name=status::succeeded")
            } catch {
              console.log("::set-output name=status::failed")
            }

      - name: Unzip artifact
        if: steps.download-artifacts.outputs.status != 'failed'
        run: |
          unzip pr.zip

      - name: Install ghapi to interact with the GitHub API via Python
        if: steps.download-artifacts.outputs.status != 'failed'
        run: |
          pip install ghapi

      - name: Create or Update a Comment on the PR with the deployment plan
        if: steps.download-artifacts.outputs.status != 'failed'
        shell: python
        run: |
          from ghapi.all import GhApi, paged

          # Setup variables
          owner, repo = r"""${{ github.repository }}""".split("/")

          # Read in Pull Request number
          with open("pr-number.txt") as f:
              pr_number = f.read().strip("\n")

          # Read in comment body
          with open("comment-body.txt") as f:
              comment_body = f.read().strip("\n")

          # Authenticate with GitHub API
          api = GhApi(token=r"""${{ secrets.GITHUB_TOKEN }}""")

          # List all comments on the PR
          issue_comments = paged(
              api.issues.list_comments,
              owner=owner,
              repo=repo,
              issue_number=pr_number,
              per_page=100,
          )

          # Find if a deployment-plan comment has been previously posted
          comment = next(
              (
                  comment[0]
                  for comment in issue_comments
                  if comment[0].user.login == "github-actions[bot]"
                  and "<!-- deployment-plan -->" in comment[0].body
              ),
              False,
          )

          if comment:
              # Comment exists - update it
              api.issues.update_comment(
                  owner=owner,
                  repo=repo,
                  comment_id=comment.id,
                  body=comment_body,
              )
          else:
              # Comment doesn't exist - create a new one
              api.issues.create_comment(
                  owner=owner,
                  repo=repo,
                  issue_number=pr_number,
                  body=comment_body,
              )
