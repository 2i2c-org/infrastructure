nfs:
  enabled: true
  volumeReporter:
    enabled: false
  pv:
    enabled: true
    # from https://docs.aws.amazon.com/efs/latest/ug/mounting-fs-nfs-mount-settings.html
    mountOptions:
      - rsize=1048576
      - wsize=1048576
      - timeo=600
      - soft # We pick soft over hard, so NFS lockups don't lead to hung processes
      - retrans=2
      - noresvport
    serverIP: fs-07b67adf6626672af.efs.us-east-2.amazonaws.com
    baseShareName: /
jupyterhub:
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "github"
    jupyterhubConfigurator:
      enabled: false
    homepage:
      templateVars:
        org:
          name: Jupyter Health
          logo_url: https://jupyter.org/assets/homepage/main-logo.svg
          url: https://github.com/jupyterhealth/
        designed_by:
          name: "Jupyter Health"
          url: https://github.com/jupyterhealth/
        operated_by:
          name: "2i2c"
          url: https://2i2c.org
        funded_by:
          name: "Jupyter Health"
          url: https://github.com/jupyterhealth/
  hub:
    # FIXME: Experiment to use oauthenticator 17.1, should be transitioned away
    #        as part of upgrading to z2jh 4, see
    #        https://github.com/2i2c-org/infrastructure/pull/4968
    #
    image:
      name: quay.io/2i2c/pkce-experiment
      tag: 0.0.1-0.dev.git.11169.h1e0fa323
    allowNamedServers: true
    config:
      JupyterHub:
        # generic auth means manual steps are required
        # to grant 2i2c members access via the oauth provider
        # 2i2c engineers contact jupyter-health admins to request access
        authenticator_class: generic-oauth
        # set cookie max age to 1
        # while we don't have refresh tokens enabled
        cookie_max_age_days: 1
      GenericOAuthenticator:
        client_id: Ima7rx8D6eko0PzlU1jK28WBUT2ZweZj7mqVG2wm
        authorize_url: https://jhe.fly.dev/o/authorize/
        token_url: https://jhe.fly.dev/o/token/
        userdata_url: https://jhe.fly.dev/api/v1/users/profile
        username_claim: email
        login_service: JupyterHealth Exchange
        scope:
          - openid
        enable_auth_state: true
        admin_users:
          - benjaminrk@gmail.com
          - yuvipanda@2i2c.org
          - rylo@berkeley.edu
        manage_groups: true
        auth_state_groups_key: "organizations"
        allowed_groups:
          - "20013" # BIDS (~all users are here)
          - "20014" # 2i2c
          - "20008" # Yaffe Lab
          - "20005" # Moslehi Lab
          - "20006" # Olgin Lab
    extraConfig:
      # get organization membership for managed groups:
      managed_organizations.py: |
        from urllib.parse import urlparse

        async def auth_state_hook(authenticator, auth_state):
            if not auth_state:
                return auth_state
            access_token = auth_state["access_token"]
            url = urlparse(authenticator.authorize_url)
            org_url = f"{url.scheme}://{url.netloc}/api/v1/users/organizations"
            organizations = await authenticator.httpfetch(
                org_url,
                headers={"Authorization": f"Bearer {access_token}"}
            )
            # use string ids for now
            auth_state["organizations"] = [str(org['id']) for org in organizations]
            return auth_state

        c.OAuthenticator.modify_auth_state_hook = auth_state_hook

      # add access tokens via auth state
      auth_state_env.py: |
        def auth_state_env(spawner, auth_state):
            if not auth_state:
                spawner.log.warning(f"Missing auth state for user {spawner.user.name}")
                return
            spawner.environment["JHE_TOKEN"] = auth_state["access_token"]

        c.Spawner.auth_state_hook = auth_state_env

      skip_refresh_for_test_user.py: |
        def refresh_user_hook(authenticator, user, auth_state):
            if user.name == "deployment-service-check":
                # if this is the user,
                # refresh_user doesn't make sense
                # consider it always fresh
                return True
            # for all other users, refresh as usual
            return None

        c.OAuthenticator.refresh_user_hook = refresh_user_hook
  singleuser:
    defaultUrl: /lab
    extraEnv:
      GH_SCOPED_CREDS_CLIENT_ID: Iv23lilZjNoav2oWKdPJ
      GH_SCOPED_CREDS_APP_URL: https://github.com/apps/jupyter-health-demostration-hub
      JHE_URL: https://jhe.fly.dev
      JHE_CLIENT_ID: Ima7rx8D6eko0PzlU1jK28WBUT2ZweZj7mqVG2wm
    image:
      name: quay.io/jupyterhealth/singleuser-premvp
      tag: "latest"
    memory:
      limit: 1991244775
      guarantee: 1991244775
    cpu:
      limit: 3.725
      guarantee: 0.2328125
    nodeSelector:
      node.kubernetes.io/instance-type: r5.xlarge

  scheduling:
    userScheduler:
      enabled: true
