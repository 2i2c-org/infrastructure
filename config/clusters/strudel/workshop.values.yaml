jupyterhub:
  ingress:
    hosts: [workshop.strudel.2i2c.cloud]
    tls:
    - hosts: [workshop.strudel.2i2c.cloud]
      secretName: https-auto-tls
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: github
  singleuser:
    extraFiles:
      gitConfig:
        mountPath: /opt/conda/etc/gitconfig
        stringData: |
          [credential "https://github.com"]
          helper = !git-credential-github-app --app-key-file /run/secrets/github/github-app-private-key.pem --app-id 2115315
          useHttpPath = true
  hub:
    config:
      # IMPORTANT: we provide GitHub push access to strudel-workshops via an app
      # This is safe-enough because we gate on people belonging to the same org (and strudel-science/infrastructure) in the config.
      # If the authenticator is changed, we must first remove the secret for the singleuser GitHub app
      GitHubOAuthenticator:
        oauth_callback_url: https://workshop.strudel.2i2c.cloud/hub/oauth_callback
        allowed_organizations:
        - strudel-science/infrastructure
        - strudel-workshops
        scope:
        - read:org
      JupyterHub:
        authenticator_class: github
    extraConfig:
      # Get GitHub identity from token
      extract_ident.py: |
        async def auth_state_hook(spawner, auth_state):
            if not auth_state:
                spawner.log.warning(f"Missing auth state for user {spawner.user.name}")
                return
            try:
                github_user = auth_state['github_user']
            except KeyError:
                spawner.log.warning(f"Missing github_user model for user {spawner.user.name}")
                return
            try:
                email = github_user['email']
                name = github_user['name']
            except KeyError:
                spawner.log.warning(f"Missing GitHub name/email field for user {spawner.user.name}")
                return

            spawner.environment['GIT_CONFIG_COUNT'] = "2"
            spawner.environment['GIT_CONFIG_KEY_0'] = "user.name"
            spawner.environment['GIT_CONFIG_VALUE_0'] = name

            spawner.environment['GIT_CONFIG_KEY_1'] = "user.email"
            spawner.environment['GIT_CONFIG_VALUE_1'] = email
            
        c.Spawner.auth_state_hook = auth_state_hook
