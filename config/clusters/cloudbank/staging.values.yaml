jupyterhub:
  ingress:
    hosts: [staging.cloudbank.2i2c.cloud]
    tls:
      - hosts: [staging.cloudbank.2i2c.cloud]
        secretName: https-auto-tls
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "google"
    homepage:
      templateVars:
        org:
          name: Cloudbank Staging
          url: https://2i2c.org
          logo_url: https://2i2c.org/media/logo.png
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: 2i2c
          url: https://2i2c.org
        funded_by:
          name: 2i2c
          url: https://2i2c.org
  hub:
    config:
      JupyterHub:
        authenticator_class: cilogon
      CILogonOAuthenticator:
        oauth_callback_url: "https://staging.cloudbank.2i2c.cloud/hub/oauth_callback"
        allowed_idps:
          http://google.com/accounts/o8/id:
            username_derivation:
              username_claim: "email"
          urn:mace:incommon:berkeley.edu:
            username_derivation:
              username_claim: "email"
      OAuthenticator:
        # WARNING: Don't use allow_existing_users with config to allow an
        #          externally managed group of users, such as
        #          GitHubOAuthenticator.allowed_organizations, as it breaks a
        #          common expectations for an admin user.
        #
        #          The broken expectation is that removing a user from the
        #          externally managed group implies that the user won't have
        #          access any more. In practice the user will still have
        #          access if it had logged in once before, as it then exists
        #          in JupyterHub's database of users.
        #
        allow_existing_users: True
      Authenticator:
        # WARNING: Removing a user from admin_users or allowed_users doesn't
        #          revoke admin status or access.
        #
        #          OAuthenticator.allow_existing_users allows any user in the
        #          JupyterHub database of users able to login. This includes
        #          any previously logged in user or user previously listed in
        #          allowed_users or admin_users, as such users are added to
        #          JupyterHub's database on startup.
        #
        #          To revoke admin status or access for a user when
        #          allow_existing_users is enabled, first remove the user from
        #          admin_users or allowed_users, then deploy the change, and
        #          finally revoke the admin status or delete the user via the
        #          /hub/admin panel.
        #
        admin_users:
          - sean.smorris@berkeley.edu
