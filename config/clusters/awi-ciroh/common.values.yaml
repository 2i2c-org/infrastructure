basehub:
  nfs:
    enabled: true
    pv:
      mountOptions:
        - soft
        - noatime
      # Google FileStore IP
      serverIP: 10.11.233.234
      # Name of Google Filestore share
      baseShareName: /homes/
  jupyterhub:
    proxy:
      https:
        enabled: false
    custom:
      singleuser:
        extraPVCs:
          - name: postgres-{username}
            class: standard
            capacity: 1Gi
      2i2c:
        add_staff_user_ids_to_admin_users: true
        add_staff_user_ids_of_type: "github"
      homepage:
        templateVars:
          org:
            name: Cooperative Institute for Research to Operations in Hydrology
            url: http://ovpred.ua.edu/alabama-water-institute/
            logo_url: https://user-images.githubusercontent.com/1879041/174884338-ec97bec1-1cc9-4ad8-8f63-06de666b5012.png
          designed_by:
            name: 2i2c
            url: https://2i2c.org
          operated_by:
            name: 2i2c
            url: https://2i2c.org
          funded_by:
            name: National Oceanic and Atmospheric Administration
            url: https://www.noaa.gov/
    hub:
      config:
        JupyterHub:
          authenticator_class: github
        Authenticator:
          # This hub uses GitHub Orgs auth and so we don't set
          # allowed_users in order to not deny access to valid members of
          # the listed orgs. These people should have admin access though.
          admin_users:
            - jameshalgren
            - arpita0911patel
            - karnesh
        GitHubOAuthenticator:
          allowed_organizations:
            - 2i2c-org
            - alabamawaterinstitute
            - NOAA-OWP
          scope:
            - read:org
    singleuser:
      storage:
        extraVolumes:
          - name: postgres-db
            persistentVolumeClaim:
              claimName: 'postgres-{username}'
        extraVolumeMounts:
          - name: postgres-db
            mountPath: /var/lib/postgresql/data
            # postgres recommends against mounting a volume directly here
            # So we put data in a subpath
            subPath: data
      initContainers:
        # /var/lib/postgresql should be writeable by uid 1000, so students
        # can blow out their db directories if need to.
        # We have to chown /home/jovyan and /home/jovyan/shared-readwrite as well -
        # since initContainers is a list, setting this here overwrites the chowning
        # initContainer we hahve set in basehub/values.yaml
        - name: volume-mount-ownership-fix
          image: busybox
          command:
            [
              "sh",
              "-c",
              "id && chown 1000:1000 /home/jovyan && chown 1000:1000 /home/jovyan/shared-readwrite && chown 1000:1000 /var/lib/postgresql/data && ls -lhd /home/jovyan ",
            ]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: home
              mountPath: /home/jovyan
              subPath: "{username}"
            # Here so we can chown it appropriately
            - name: home
              mountPath: /home/jovyan/shared-readwrite
              subPath: _shared
            - name: postgres-db
              mountPath: /var/lib/postgresql/data
              # postgres recommends against mounting a volume directly here
              # So we put data in a subpath
              subPath: data
      extraContainers:
        - name: postgres
          image: postgres:14.5
          args:
          # Listen only on localhost, rather than on all interfaces
          # This allows us to use passwordless login, as only the user notebook container can access this
          - -c
          - listen_addresses=127.0.0.1
          resources:
            limits:
              # Best effort only. No more than 1 CPU
              memory: 512Mi
              cpu: 1.0
            requests:
              # If we don't set requests, k8s sets requests == limits!
              memory: 64Mi
              cpu: 0.01
          env:
          - name: POSTGRES_HOST_AUTH_METHOD
            value: "trust"
          - name: POSTGRES_USER
            value: "jovyan"
          securityContext:
            runAsUser: 1000
          volumeMounts:
          - name: home
            mountPath: /home/jovyan
            subPath: "{username}"
          - name: postgres-db
            mountPath: /var/lib/postgresql/data
            # postgres recommends against mounting a volume directly here
            # So we put data in a subpath
            subPath: data
      image:
        # Image build repo: https://github.com/2i2c-org/awi-ciroh-image
        name: "quay.io/2i2c/awi-ciroh-image"
        tag: "63ecd92f8d84"
      profileList:
        # The mem-guarantees are here so k8s doesn't schedule other pods
        # on these nodes. They need to be just under total allocatable
        # RAM on a node, not total node capacity. Values calculated using
        # https://learnk8s.io/kubernetes-instance-calculator
        - display_name: "Small"
          description: 5GB RAM, 2 CPUs
          default: true
          kubespawner_override:
            mem_limit: 7G
            mem_guarantee: 4.5G
            node_selector:
              node.kubernetes.io/instance-type: n1-standard-2
        - display_name: Medium
          description: 11GB RAM, 4 CPUs
          kubespawner_override:
            mem_limit: 15G
            mem_guarantee: 11G
            node_selector:
              node.kubernetes.io/instance-type: n1-standard-4
        - display_name: Large
          description: 24GB RAM, 8 CPUs
          kubespawner_override:
            mem_limit: 30G
            mem_guarantee: 24G
            node_selector:
              node.kubernetes.io/instance-type: n1-standard-8
        - display_name: Huge
          description: 52GB RAM, 16 CPUs
          kubespawner_override:
            mem_limit: 60G
            mem_guarantee: 52G
            node_selector:
              node.kubernetes.io/instance-type: n1-standard-16
dask-gateway:
  gateway:
    backend:
      scheduler:
        cores:
          request: 0.8
          limit: 1
        memory:
          request: 1G
          limit: 2G
