jupyterhub:
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "github"
    homepage:
      templateVars:
        org:
          name: University of Texas
          logo_url: https://upload.wikimedia.org/wikipedia/en/thumb/e/e1/University_of_Texas_at_Austin_seal.svg/300px-University_of_Texas_at_Austin_seal.svg.png
          url: https://www.utexas.edu/
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: 2i2c
          url: https://2i2c.org
        funded_by:
          name: JROST & IOI
          url: https://investinopen.org/blog/jrost-rapid-response-fund-awardees
  hub:
    extraConfig:
      # Create persistent disks for each user in the hub to store postgresql data in
      100-create-postgres-pvc: |
        from jupyterhub.utils import exponential_backoff
        from kubespawner.objects import make_pvc
        from functools import partial

        def make_extra_pvc(component, name_template, storage_class, storage_capacity, spawner):
            """
            Create a PVC resource for storing database contents
            """
            labels = spawner._build_common_labels({})
            labels.update({
                'component': component
            })
            annotations = spawner._build_common_annotations({})
            storage_selector = spawner._expand_all(spawner.storage_selector)
            return make_pvc(
                name=spawner._expand_all(name_template),
                storage_class=storage_class,
                access_modes=['ReadWriteOnce'],
                selector={},
                storage=storage_capacity,
                labels=labels,
                annotations=annotations
            )

        # 1Gi seems the smallest PVC you can make - anything smaller than that is rounded up to 1Gi
        # This size can be increased, and users will get the newer sized disk when they start
        # their servers next - https://kubernetes.io/docs/concepts/storage/persistent-volumes/#expanding-persistent-volumes-claims
        make_db_pvc = partial(make_extra_pvc, 'postgres-storage', 'postgres-{username}', 'standard-rwo', '10Gi')

        async def ensure_db_pvc(spawner):
            """"
            Ensure a PVC is created for this user's database volume
            """
            pvc = make_db_pvc(spawner)
            # If there's a timeout, just let it propagate to the user
            await exponential_backoff(
                partial(spawner._make_create_pvc_request, pvc, spawner.k8s_api_request_timeout),
                f'Could not create pvc {pvc.metadata.name}',
                # Each req should be given k8s_api_request_timeout seconds.
                timeout=spawner.k8s_api_request_retry_timeout
            )
        c.Spawner.pre_spawn_hook = ensure_db_pvc
    config:
      Authenticator:
        allowed_users: &utexas_demo_users
          - jameshowison
        admin_users: *utexas_demo_users
  singleuser:
    memory:
      guarantee: 2G
      limit: 2G
    storage:
      extraVolumes:
        - name: postgres-db
          persistentVolumeClaim:
            claimName: "postgres-{username}"
      extraVolumeMounts:
        - name: postgres-db
          mountPath: /var/lib/postgresql/data
          # postgres recommends against mounting a volume directly here
          # So we put data in a subpath
          subPath: data
    initContainers:
      # /var/lib/postgresql should be writeable by uid 1000, so students
      # can blow out their db directories if need to. Also lets postgres actually
      # write to its data directory
      - name: postgres-volume-mount-hack
        image: busybox
        command:
          - sh
          - -c
          - "id && chown -R 1000:1000 /var/lib/postgresql && ls -lhd /var/lib/postgresql"
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: postgres-db
            mountPath: /var/lib/postgresql/data
            # postgres recommends against mounting a volume directly here
            # So we put data in a subpath
            subPath: data
    extraContainers:
      - name: pgadmin4
        image: dpage/pgadmin4
        env:
          # Users use this to login to pgadmin4 itself
          # Access to that is secured with jupyter-server-proxy
          - name: PGADMIN_DEFAULT_EMAIL
            value: jovyan@jovyan.org
          - name: PGADMIN_DEFAULT_PASSWORD
            value: jovyan
          # Don't allow outside users to even connect to pgadmin4
          - name: PGADMIN_LISTEN_ADDRESS
            value: "127.0.0.1"
          - name: PGADMIN_LISTEN_PORT
            value: "5050"
          # Tell pgadmin4 what base_url it's running under
          - name: SCRIPT_NAME
            # FIXME: This doesn't work with named servers,
            # https://github.com/jupyterhub/kubespawner/pull/565 fixes this
            value: "/user/{username}/proxy/absolute/5050"
          # Turn off tying the user session to a particular IP the request
          # is coming from - in a dynamic environment like kubernetes, this
          # means users keep getting 'logged out' every minute or so.
          # Look for `ENHANCED_COOKIE_PROTECTION` in
          # https://www.pgadmin.org/docs/pgadmin4/development/config_py.html
          - name: PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION
            value: "False"
      - name: postgres
        image: postgres:10
        resources:
          limits:
            memory: 2Gi
            cpu: 1.0
          requests:
            memory: 1Gi
            cpu: 0.25
        env:
          - name: POSTGRES_HOST_AUTH_METHOD
            value: "trust"
          - name: POSTGRES_USER
            value: "jovyan"
        securityContext:
          runAsUser: 1000
          fsGroup: 1000
        volumeMounts:
          - name: home
            mountPath: /home/jovyan
            subPath: "{username}"
          - name: postgres-db
            mountPath: /var/lib/postgresql/data
            # postgres recommends against mounting a volume directly here
            # So we put data in a subpath
            subPath: data
