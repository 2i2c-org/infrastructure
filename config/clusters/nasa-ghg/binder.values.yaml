userServiceAccount:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::597746869805:role/nasa-ghg-hub-binder
jupyterhub:
  ingress:
    hosts: [hub.binder.ghg.2i2c.cloud]
    tls:
    - hosts: [hub.binder.ghg.2i2c.cloud]
      secretName: https-auto-tls
  cull:
    every: 300
    # No pods over 12h long
    maxAge: 43200
    # Also cull all users more than 12h old
    users: true
  custom:
    binderhubUI:
      enabled: true
    2i2c:
      add_staff_user_ids_to_admin_users: false
    jupyterhubConfigurator:
      enabled: false
    singleuserAdmin:
      extraVolumeMounts: []
    homepage:
      templateVars:
        enabled: false
  singleuser:
    nodeSelector:
      2i2c/hub-name: binder
    memory:
      guarantee: 1G
      limit: 8G
    cpu:
      limit: 1
    storage:
      type: none
      extraVolumeMounts: []
    initContainers: []
    profileList: []
    cmd:
    - python3
    - -c
    - |
      import os
      import sys

      try:
          import jupyterlab
          import jupyterlab.labapp
          major = int(jupyterlab.__version__.split(".", 1)[0])
      except Exception as e:
          print("Failed to import jupyterlab: {e}", file=sys.stderr)
          have_lab = False
      else:
          have_lab = major >= 3

      if have_lab:
          # technically, we could accept another jupyter-server-based frontend
          print("Launching jupyter-lab", file=sys.stderr)
          exe = "jupyter-lab"
      else:
          print("jupyter-lab not found, launching jupyter-notebook", file=sys.stderr)
          exe = "jupyter-notebook"

      # launch the notebook server
      os.execvp(exe, sys.argv)
  hub:
    config:
      BinderSpawnerMixin:
        auth_enabled: false
      JupyterHub:
        authenticator_class: 'null'
    redirectToServer: false
    loadRoles:
      binder:
        services:
        - binder
        scopes:
        - servers
        - admin:users
      user:
        scopes:
        - self
          # Admin users will by default have access:services, so this is only
          # observed to be required for non-admin users.
        - access:services!service=binder
binderhub-service:
  enabled: true
  networkPolicy:
    enabled: true
  dockerApi:
    nodeSelector:
      2i2c/hub-name: binder
  ingress:
    enabled: true
    hosts: [binder.ghg.2i2c.cloud]
    tls:
    - hosts: [binder.ghg.2i2c.cloud]
      secretName: binder-https-auto-tls
  custom:
    sendLogsOfLaunchEventsTo2i2c: true
  config:
    KubernetesBuildExecutor:
      node_selector:
        # Schedule builder pods to run on the smallest user nodes only
        # https://github.com/2i2c-org/infrastructure/issues/4241
        node.kubernetes.io/instance-type: r5.xlarge
        2i2c/hub-name: binder
    BinderHub:
      base_url: /
      hub_url: https://hub.binder.ghg.2i2c.cloud
      badge_base_url: https://binder.ghg.2i2c.cloud
      auth_enabled: false
      enable_api_only_mode: false
      image_prefix: quay.io/imagebuilding-non-gcp-hubs/ghg-binder-
    DockerRegistry:
      url: &url https://quay.io
      username: &username imagebuilding-non-gcp-hubs+image_builder
  extraEnv:
  - name: JUPYTERHUB_API_TOKEN
    valueFrom:
      secretKeyRef:
        name: hub
        key: hub.services.binder.apiToken
  - name: JUPYTERHUB_CLIENT_ID
    value: service-binder
  - name: JUPYTERHUB_API_URL
    value: https://hub.binder.ghg.2i2c.cloud/hub/api
    # Without this, the redirect URL to /hub/api/... gets
    # appended to binderhub's URL instead of the hub's
  - name: JUPYTERHUB_BASE_URL
    value: https://hub.binder.ghg.2i2c.cloud/
  buildPodsRegistryCredentials:
    server: *url
    username: *username
