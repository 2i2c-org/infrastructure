jupyterhub:
  scheduling:
    corePods:
      nodeAffinity:
        matchNodePurpose: ignore
    userPods:
      nodeAffinity:
        matchNodePurpose: ignore
    userScheduler:
      nodeSelector:
        capi.stackhpc.com/node-group: core
  ingress:
    hosts:
    - hub.projectpythia.org
    tls:
    - secretName: https-auto-tls
      hosts:
      - hub.projectpythia.org
  custom:
    binderhubUI:
      enabled: true
    2i2c:
      add_staff_user_ids_to_admin_users: false
    jupyterhubConfigurator:
      enabled: false
    singleuserAdmin:
      extraVolumeMounts: []
    homepage:
      templateVars:
        enabled: false
  singleuser:
    cpu:
      limit: 4
    memory:
      limit: 8G
      guarantee: 8G
    nodeSelector:
      capi.stackhpc.com/node-group: user-m3-large
    storage:
      type: none
      extraVolumeMounts: []
    initContainers: []
    profileList: []
    cmd:
    - python3
    - -c
    - |
      import os
      import sys

      try:
          import jupyterlab
          import jupyterlab.labapp
          major = int(jupyterlab.__version__.split(".", 1)[0])
      except Exception as e:
          print("Failed to import jupyterlab: {e}", file=sys.stderr)
          have_lab = False
      else:
          have_lab = major >= 3

      if have_lab:
          # technically, we could accept another jupyter-server-based frontend
          print("Launching jupyter-lab", file=sys.stderr)
          exe = "jupyter-lab"
      else:
          print("jupyter-lab not found, launching jupyter-notebook", file=sys.stderr)
          exe = "jupyter-notebook"

      # launch the notebook server
      os.execvp(exe, sys.argv)
  # Custom selectors are needed because the magnum driver doesn't yet support
  # custom labeling due to a bug
  proxy:
    chp:
      nodeSelector:
        capi.stackhpc.com/node-group: core
    traefik:
      nodeSelector:
        capi.stackhpc.com/node-group: core
  prePuller:
    hook:
      nodeSelector:
        capi.stackhpc.com/node-group: user-m3-large
  hub:
    nodeSelector:
      capi.stackhpc.com/node-group: core
    loadRoles:
      binder:
        services:
        - binder
        scopes:
        - servers
        - admin:users
      user:
        scopes:
        - self
        - access:services!service=binder
    redirectToServer: false
    config:
      BinderSpawnerMixin:
        auth_enabled: false
        cors_allow_origin: '*'
      JupyterHub:
        authenticator_class: 'null'

binderhub-service:
  enabled: true
  networkPolicy:
    enabled: true
  nodeSelector:
    capi.stackhpc.com/node-group: core
    hub.jupyter.org/node-purpose:
  ingress:
    enabled: true
    hosts:
    - binder.projectpythia.org
    tls:
    - secretName: binder-https-auto-tls
      hosts:
      - binder.projectpythia.org
  dockerApi:
    nodeSelector:
      hub.jupyter.org/node-purpose:
      capi.stackhpc.com/node-group: user-m3-large
  extraConfig: |
    from binderhub.build import KubernetesBuildExecutor
    from kubernetes import client

    class LimitedBuildExecutor(KubernetesBuildExecutor):

        def pre_process_pod(self, pod):
          container, = pod.spec.containers
          container.resources.requests['ephemeral-storage'] = "9Gi"
          print("Patching build pod definition to set ephemeral-storage request:\n", pod)
          return pod

        @property
        def pod(self):
            # No custom error handling, this is internal
            return self._pod

        @pod.setter
        def pod(self, value):
            self._pod = self.pre_process_pod(value)

        c.BinderHub.build_class = LimitedBuildExecutor

  config:
    GitHubRepoProvider:
      allowed_specs:
      - ^ProjectPythia/.*$
      - ^ktyle/.*$
      - ^binder-examples/.*
    BinderHub:
      base_url: /
      hub_url: https://hub.projectpythia.org
      badge_base_url: https://binder.projectpythia.org
      auth_enabled: false
      enable_api_only_mode: false
      image_prefix: quay.io/imagebuilding-non-gcp-hubs/jetstream2-projectpythia-pythia-binder-
      banner_message: Binder on Jetstream2 for use with Project Pythia
      about_message: ''
      cors_allow_origin: '*'
    DockerRegistry:
      url: &url https://quay.io
      username: &username imagebuilding-non-gcp-hubs+image_builder
    KubernetesBuildExecutor:
      node_selector:
        # Schedule builder pods to run on user nodes only
        hub.jupyter.org/node-purpose:
        capi.stackhpc.com/node-group: user-m3-large
  extraEnv:
  - name: JUPYTERHUB_API_TOKEN
    valueFrom:
      secretKeyRef:
        name: '{{ include "jupyterhub.hub.fullname" . }}'
        key: hub.services.binder.apiToken
  - name: JUPYTERHUB_CLIENT_ID
    value: service-binder
  - name: JUPYTERHUB_API_URL
    value: https://hub.projectpythia.org/hub/api
    # Without this, the redirect URL to /hub/api/... gets
    # appended to binderhub's URL instead of the hub's
  - name: JUPYTERHUB_BASE_URL
    value: https://hub.projectpythia.org/
  # The password to the registry is stored encrypted in the hub's encrypted config file
  buildPodsRegistryCredentials:
    server: *url
    username: *username
