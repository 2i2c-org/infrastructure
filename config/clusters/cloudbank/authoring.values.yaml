jupyterhub:
  ingress:
    hosts: [authoring.cloudbank.2i2c.cloud]
    tls:
      - hosts: [authoring.cloudbank.2i2c.cloud]
        secretName: https-auto-tls
  prePuller:
    # hook prePuller shouldn't be enabled when configuring images in any other
    # way than singleuser.image
    hook:
      enabled: true
  singleuser:
    memory:
      guarantee: 512M
      limit: 1G
    image:
      name: public.ecr.aws/s7x4g6w9/cal-icor/base-user-image
      tag: a4e1b2e1c4f9
  custom:
    2i2c:
      add_staff_user_ids_to_admin_users: true
      add_staff_user_ids_of_type: "github"
    homepage:
      templateVars:
        org:
          name: 2i2c / CloudBank Hubs Demo
          logo_url: https://www.cloudbank.org/sites/default/files/file_fields/logo.png
          url: https://docs.2i2c.org/
        designed_by:
          name: 2i2c
          url: https://2i2c.org
        operated_by:
          name: CloudBank
          url: http://cloudbank.org/
        funded_by:
          name: CloudBank
          url: http://cloudbank.org/
  hub:
    config:
      JupyterHub:
        authenticator_class: github
      GitHubOAuthenticator:
        oauth_callback_url: https://authoring.cloudbank.2i2c.cloud/hub/oauth_callback
        populate_teams_in_auth_state: true
        allowed_organizations:
          - 2i2c-org:hub-access-for-2i2c-staff
          - ucb-ds
        scope:
          - read:org
      Authenticator:
        enable_auth_state: true
        manage_groups: true
        admin_users:
          - sean-morris
          - ericvd-ucb
    services:
      jupyterhub-groups-exporter: {}
    loadRoles:
      jupyterhub-groups-exporter:
        services:
          - jupyterhub-groups-exporter
        scopes:
          - users
          - groups
    extraConfig:
      custom-github-oauthenticator: |
        class CustomGitHubOAuthenticator(GitHubOAuthenticator):
          async def authenticate(self, *args, **kwargs):
              resp = await super().authenticate(*args, **kwargs)
              if resp["auth_state"]["teams"] is None:
                return resp
              groups = []
              for team in resp["auth_state"]["teams"]:
                if f'{team["organization"]["login"]}:{team["slug"]}' not in self.allowed_organizations:
                  continue
                else:
                  groups.append(f'{team["organization"]["login"]}:{team["slug"]}')
              resp["groups"] = groups
              return resp
        c.JupyterHub.authenticator_class = CustomGitHubOAuthenticator
    extraFiles:
      configurator-schema-default:
        data:
          properties:
            Spawner.default_url:
              type: string
              title: Default User Interface
              enum:
                - "/tree"
                - "/lab"
                - "/retro"
              default: "/lab"
              enumMetadata:
                interfaces:
                  - value: "/tree"
                    title: Classic Notebook
                    description:
                      The original single-document interface for creating
                      Jupyter Notebooks.
                  - value: "/lab"
                    title: JupyterLab
                    description: A Powerful next generation notebook interface
                  - value: "/retro"
                    title: RetroLab
                    description: A JupyterLab distribution with a retro look and feel, more similar to the classic Jupyter notebook.
  cull:
    # Cull after 30min of inactivity
    every: 300
    timeout: 1800
    # No pods over 12h long
    maxAge: 43200

jupyterhub-groups-exporter:
  enabled: true
  config:
    groupsExporter:
      update_exporter_interval: 3600
