# Configuration of dependency charts
# -------------------------------------------------------------------------------
#

# cluster-autoscaler is responsible for understanding if k8s nodes needs to be
# added or removed. A pending pod is a sign that another node should be added,
# and an underused node is a sign that a node should be removed.
#
# We always need a cluster-autoscaler, but only deploy it ourselves if its not
# provided as part of the k8s cluster.
#
# values ref: https://github.com/kubernetes/autoscaler/blob/master/charts/cluster-autoscaler/values.yaml
#
cluster-autoscaler:
  enabled: false

# ingress-nginx is responsible for proxying traffic based on k8s Ingress
# resources defined in the k8s cluster.
#
# Typically, all inbound traffic arrives to some ingress-nginx controller pod
# via a k8s Service that has a public IP, and is thereafter proxied to a k8s
# Service (a Pod selected by a k8s Service) that doesn't have a public IP.
#
# values ref: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
#
ingress-nginx:
  controller:
    podLabels:
      # nginx-ingress controllers need to be allowed proxy traffic onwards to
      # JupyterHub's proxy pod (and only the proxy pod) in clusters with
      # NetworkPolicy enforcement enabled. Adding this label on the controller
      # pod allows that.
      #
      # ref: https://z2jh.jupyter.org/en/stable/administrator/security.html#introduction-to-the-chart-s-four-network-policies
      #
      hub.jupyter.org/network-access-proxy-http: "true"

# prometheus is responsible for collecting metrics and informing grafana about
# the metrics on request. It comes with several dependency charts, where we
# opt-out of a few.
#
# values ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
#
prometheus:
  # alertmanager is an optional prometheus chart dependency that we opt-out from
  # as we favor Grafana for this functionality. Grafana provides alerts and does
  # so with a better UI that we expose publicly behind auth anyhow.
  #
  alertmanager:
    enabled: false

  # prometheus-pushgateway is an optional prometheus chart dependency that we
  # opt-out from. pushgateway provides a way to complement prometheus server's
  # behavior of scraping metrics from services by allowing services to push
  # metrics to prometheus.
  #
  prometheus-pushgateway:
    enabled: false

  # kube-state-metrics is an optional prometheus chart dependency that we rely
  # on to collect metrics about the k8s cluster's pods and nodes as reported by
  # the k8s api-server.
  #
  # values ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-state-metrics/values.yaml
  #
  kube-state-metrics:
    # kube-state-metrics stopped collecting *all* labels on all kubernetes objects as
    # prometheus labels, as it exploded the total number of metrics being collected. We
    # have to explicitly allow-list the labels we want. These are the ones needed for
    # the graphs from https://github.com/jupyterhub/grafana-dashboards to work
    metricLabelsAllowlist:
      - pods=[app,component,hub.jupyter.org/username,app.kubernetes.io/component]
      - nodes=[*]

  # prometheus-node-exporter is an optional prometheus chart dependency that we
  # rely on to collect metrics about the nodes
  #
  # values ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml
  #
  prometheus-node-exporter:
    tolerations:
      # Tolerate tainted jupyterhub user nodes
      - key: hub.jupyter.org_dedicated
        value: user
        effect: NoSchedule
      - key: hub.jupyter.org/dedicated
        value: user
        effect: NoSchedule
      # Tolerate tainted dask worker nodes
      - key: k8s.dask.org_dedicated
        value: worker
        effect: NoSchedule
      - key: k8s.dask.org/dedicated
        value: worker
        effect: NoSchedule

  networkPolicy:
    enabled: true

  server:
    ingress:
      annotations:
        # Annotations required to enable basic authentication for any ingress
        # into prometheus server from the outside world. This secret is
        # created via templates/prometheus-ingress-auth/secret.yaml file in the support chart,
        # and the contents are controlled by config under prometheusIngressAuthSecret.
        # Ingress is not enabled by default, so whichever clusters we want
        # this we should enable it explicitly.
        nginx.ingress.kubernetes.io/auth-type: basic
        nginx.ingress.kubernetes.io/auth-secret: prometheus-ingress-auth-basic
        nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
        # If we enable external ingress into prometheus, we must secure it with HTTPS
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
    strategy:
      # We have a persistent disk attached, so the default (RollingUpdate)
      # can sometimes get 'stuck' and require pods to be manually deleted.
      type: Recreate
    resources:
      # Without this, prometheus can easily starve users
      requests:
        cpu: 0.2
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi
    labels:
      # For HTTP access to the hub, to scrape metrics
      hub.jupyter.org/network-access-hub: "true"
    persistentVolume:
      size: 100Gi
    # Keep data for at least 1 year
    retention: 366d
    service:
      type: ClusterIP

# grafana presents dashboards based on metrics from a prometheus server.
#
# We setup dashboards programmatically via a grafana REST API based on
# https://github.com/jupyterhub/grafana-dashboards.
#
# values ref: https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
#
grafana:
  persistence:
    # Attach a tiny 1G PVC with grafana for auth db as well as dashboard definition (not data) storage.
    # Matches what we do with JupyterHub
    enabled: true
  deploymentStrategy:
    type: Recreate
  service:
    # Grafana is exposed to the world via ingress
    type: ClusterIP

  rbac:
    namespaced: true
    pspEnabled: false

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod

  # grafana is partially configured for GitHub authentication here, but the
  # following values need to be set as well, where client_secret should be kept
  # secret:
  #
  #     server:
  #       root_url: https://grafana.<cluster_name>.2i2c.cloud
  #     auth.github:
  #       enabled: true
  #       allowed_organizations: "2i2c-org some-other-gh-org"
  #       client_id: ""
  #       client_secret: ""
  #
  grafana.ini:
    server:
      root_url: ""
    auth.github:
      enabled: false
      allowed_organizations: ""
      client_id: ""
      client_secret: ""
      allow_sign_up: true
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        # Automatically add the prometheus server in the same namespace as the grafana as a datasource
        - name: prometheus
          orgId: 1
          type: prometheus
          # This is the name of the kubernetes service exposed by the prometheus server
          url: http://support-prometheus-server
          access: proxy
          isDefault: true
          editable: false

# cryptnono kills processes attempting to mine the cryptocurrency Monero in the
# k8s cluster.
#
# values ref: https://github.com/yuvipanda/cryptnono/blob/main/cryptnono/values.yaml
#
cryptnono:
  enabled: true

# Configuration of templates provided directly by this chart
# -------------------------------------------------------------------------------
#

prometheusIngressAuthSecret:
  enabled: false
  username: ""
  password: ""

redirects:
  rules: []

# Enable a daemonset to install nvidia device plugin to GPU nodes
# AWS does not require this to be set, as eksctl sets this up automatically
nvidiaDevicePlugin:
  # For Azure-specific image, default to false
  azure:
    enabled: false
  # For GKE specific image, defaults to false
  gke:
    enabled: false
    version: "stable"

# A placeholder as global values that can be referenced from the same location
# of any chart should be possible to provide, but aren't necessarily provided or
# used.
global: {}
