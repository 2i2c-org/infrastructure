basehub:
  userServiceAccount:
    annotations:
      iam.gke.io/gcp-service-account: pangeo-hubs-coessing@pangeo-integration-te-3eea.iam.gserviceaccount.com
  jupyterhub:
    custom:
      cloudResources:
        scratchBucket:
          enabled: false
      2i2c:
        add_staff_user_ids_to_admin_users: true
        add_staff_user_ids_of_type: "google"
      homepage:
        templateVars:
          org:
            name: COESSING
            url: https://coessing.org/
            logo_url: "https://coessing.files.wordpress.com/2016/08/ghana-logo-21.png?w=262&h=376&zoom=2"
    ingress:
      hosts: [coessing.2i2c.cloud]
      tls:
        - hosts: [coessing.2i2c.cloud]
          secretName: https-auto-tls
    singleuser:
      extraEnv:
        SCRATCH_BUCKET: gcs://pangeo-hubs-coessing-scratch/$(JUPYTERHUB_USER)
        PANGEO_SCRATCH: gcs://pangeo-hubs-coessing-scratch/$(JUPYTERHUB_USER)
      # No profiles
      profileList: null
      memory:
        limit: 7G
        guarantee: 4.5G
      nodeSelector:
        node.kubernetes.io/instance-type: n1-standard-2
    hub:
      config:
        JupyterHub:
          authenticator_class: cilogon
        CILogonOAuthenticator:
          oauth_callback_url: "https://coessing.2i2c.cloud/hub/oauth_callback"
          allowed_idps:
            http://google.com/accounts/o8/id:
              username_derivation:
                username_claim: "email"
        OAuthenticator:
          # WARNING: Don't use allow_existing_users with config to allow an
          #          externally managed group of users, such as
          #          GitHubOAuthenticator.allowed_organizations, as it breaks a
          #          common expectations for an admin user.
          #
          #          The broken expectation is that removing a user from the
          #          externally managed group implies that the user won't have
          #          access any more. In practice the user will still have
          #          access if it had logged in once before, as it then exists
          #          in JupyterHub's database of users.
          #
          allow_existing_users: True
        Authenticator:
          # WARNING: Removing a user from admin_users or allowed_users doesn't
          #          revoke admin status or access.
          #
          #          OAuthenticator.allow_existing_users allows any user in the
          #          JupyterHub database of users able to login. This includes
          #          any previously logged in user or user previously listed in
          #          allowed_users or admin_users, as such users are added to
          #          JupyterHub's database on startup.
          #
          #          To revoke admin status or access for a user when
          #          allow_existing_users is enabled, first remove the user from
          #          admin_users or allowed_users, then deploy the change, and
          #          finally revoke the admin status or delete the user via the
          #          /hub/admin panel.
          #
          admin_users:
            - paigemar@umich.edu
